---
import '../styles.css';
import { createSignal, onCleanup } from "solid-js";
---
<html lang="en">
<head>	
	<meta charset="utf-8" />
	<meta charset="utf-8" />
	<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
	<meta name="viewport" content="width=device-width" />
	<meta name="generator" content={Astro.generator} />
	<title>Doppleruv efekt</title>		
</head>
<body>	
	<header>
    	Doppleruv efekt
  	</header>	
	<script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.0/p5.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.0/addons/p5.sound.js"></script>
	<script>
		let x = 50;
		let y = 50;
		let xSpeed = 5;
		let ySpeed = 3;	  
		let hitSound;
		
		// Ensure P5.js functions are available in the global scope
		window.setup = function() {			
		createCanvas(800, 400);
		// Create buttons
		let button1 = createButton('Set Speed 1');
      	let button2 = createButton('Set Speed 2');

		// Set button positions
		button1.position(10, height + 10);
		button2.position(120, height + 10);

		// Set button events
		button1.mousePressed(setSpeed1);
		button2.mousePressed(setSpeed2);
		
	  };
  
	  window.draw = function() {
		background(220);
  
		// Draw the bouncing ball
		fill(0, 128, 255);
		ellipse(x, y, 30, 30);
  
		// Update the ball's position
		x += xSpeed;
		y += ySpeed;
  
		// Bounce off the walls
		if (x > width - 15 || x < 15) {
		  xSpeed *= -1;
		  playHitSound();
		}
  
		if (y > height - 15 || y < 15) {
		  ySpeed *= -1;
		  playHitSound();
		}
	  };  
	    
	  // Function to change the speed of the ball
	  function setSpeed1() {
      xSpeed = 5;
      ySpeed = 3;
    }

    function setSpeed2() {
      xSpeed = 8;
      ySpeed = 4;
    }

	// Function to play the hit sound
    function playHitSound() {    
		
    }
  
	  // Run P5.js setup function when the document is ready
	  document.addEventListener('DOMContentLoaded', () => {
		setup();
	  });
  
	  // Run P5.js draw function continuously
	  window.requestAnimationFrame(draw);
	</script>
	<!-- Script section for handling button clicks -->
	<script>
		document.addEventListener('DOMContentLoaded', function() {
		document.getElementById('speedButton1').addEventListener('click', function() {
			changeSpeed(5, 3);
		});
	
		document.getElementById('speedButton2').addEventListener('click', function() {
			changeSpeed(8, 4);
		});
	
		// Add more event listeners for additional buttons as needed
		});
	</script>
	
	<nav>
    <p>Sinus Wave SoundPlayer:</p>
    
	<button onclick="startSound()">Start Sound</button>
    <button onclick="stopSound()">Stop Sound</button>
    <button onclick="decreaseFrequency()">Decrease Frequency</button>
    <button onclick="increaseFrequency()">Increase Frequency</button>

    <audio id="sinusWavePlayer"></audio>

    <script>
      const audioContext = new (window.AudioContext || window.webkitAudioContext)();
      const sinusWavePlayer = document.getElementById('sinusWavePlayer');
      let oscillator;

      function startSound() {
        oscillator = audioContext.createOscillator();
        oscillator.type = 'sine'; // Sinusoidal wave
        oscillator.frequency.setValueAtTime(440, audioContext.currentTime); // Initial frequency
        oscillator.connect(audioContext.destination);
        oscillator.start();
        sinusWavePlayer.src = URL.createObjectURL(new Blob([generateSinusWave()]));
        document.addEventListener('keydown', unlockAudio, { once: true });
      }

      function unlockAudio() {
        // This is a workaround to unlock audio on Chrome
        sinusWavePlayer.play().then(() => {
          sinusWavePlayer.pause();
          sinusWavePlayer.currentTime = 0;
        });
      }

      function stopSound() {
        if (oscillator) {
          oscillator.stop();
          sinusWavePlayer.src = ''; // Clear the current source
        }
      }

      function decreaseFrequency() {
        if (oscillator) {
          oscillator.frequency.value -= 10;
          updateSinusWave();
        }
      }

      function increaseFrequency() {
        if (oscillator) {
          oscillator.frequency.value += 10;
          updateSinusWave();
        }
      }

      function updateSinusWave() {
        sinusWavePlayer.src = URL.createObjectURL(new Blob([generateSinusWave()]));
      }

      function generateSinusWave() {
        const sampleRate = 44100;
        const duration = 1; // seconds
        const samples = new Float32Array(sampleRate * duration);

        for (let i = 0; i < samples.length; i++) {
          samples[i] = Math.sin(2 * Math.PI * oscillator.frequency.value * i / sampleRate);
        }

        return new Float32Array(samples.buffer);
      }
    </script>
  </nav>	
</body>
</html>
